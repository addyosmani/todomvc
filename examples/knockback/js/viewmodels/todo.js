// Generated by CoffeeScript 1.10.0
(function() {
  var ENTER_KEY, ESCAPE_KEY,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ENTER_KEY = 13;

  ESCAPE_KEY = 27;

  window.TodoViewModel = (function(superClass) {
    extend(TodoViewModel, superClass);

    function TodoViewModel(model, options) {
      this.onCheckEditEnd = bind(this.onCheckEditEnd, this);
      this.onCheckEditBegin = bind(this.onCheckEditBegin, this);
      this.onDestroy = bind(this.onDestroy, this);
      TodoViewModel.__super__.constructor.call(this, model, {
        requires: ['title', 'completed']
      }, options);
      this.completed.subscribe((function(_this) {
        return function(completed) {
          return _this.model().save({
            completed: completed
          });
        };
      })(this));
      this.edit_title = ko.observable();
      this.editing = ko.observable(false);
    }

    TodoViewModel.prototype.onDestroy = function() {
      return this.model().destroy();
    };

    TodoViewModel.prototype.onCheckEditBegin = function() {
      if (this.editing()) {
        return;
      }
      this.edit_title(this.title());
      this.editing(true);
      return $('.todo-input').focus();
    };

    TodoViewModel.prototype.onCheckEditEnd = function(vm, event) {
      var title;
      if (!this.editing()) {
        return;
      }
      if (event.keyCode === ESCAPE_KEY) {
        this.editing(false);
      }
      if ((event.keyCode === ENTER_KEY) || (event.type === 'blur')) {
        $('.todo-input').blur();
        title = this.edit_title();
        if ($.trim(title)) {
          this.model().set({
            title: title
          }).save({
            title: $.trim(title)
          });
        } else {
          _.defer((function(_this) {
            return function() {
              return _this.model().destroy();
            };
          })(this));
        }
        return this.editing(false);
      }
    };

    return TodoViewModel;

  })(kb.ViewModel);

}).call(this);
