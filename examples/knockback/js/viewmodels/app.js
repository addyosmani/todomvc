// Generated by CoffeeScript 1.10.0
(function() {
  var ENTER_KEY,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ENTER_KEY = 13;

  window.AppViewModel = (function() {
    function AppViewModel() {
      this.onClearCompleted = bind(this.onClearCompleted, this);
      this.onAddTodo = bind(this.onAddTodo, this);
      var filter_fn, fn, i, len, ref, route, router;
      this.list_filter_mode = ko.observable('');
      filter_fn = ko.computed((function(_this) {
        return function() {
          switch (_this.list_filter_mode()) {
            case 'active':
              return (function(model) {
                return !model.get('completed');
              });
            case 'completed':
              return (function(model) {
                return model.get('completed');
              });
            default:
              return (function() {
                return true;
              });
          }
        };
      })(this));
      this.todos = kb.collectionObservable(new TodoCollection(), TodoViewModel, {
        filters: filter_fn
      });
      this.todos.collection().fetch();
      this._todos_changed = kb.triggeredObservable(this.todos.collection(), 'change add remove');
      this.tasks_exist = ko.computed((function(_this) {
        return function() {
          _this._todos_changed();
          return !!_this.todos.collection().models.length;
        };
      })(this));
      this.title = ko.observable('');
      this.completed_count = ko.computed((function(_this) {
        return function() {
          _this._todos_changed();
          return _this.todos.collection().filter(function(model) {
            return model.get('completed');
          }).length;
        };
      })(this));
      this.remaining_count = ko.computed((function(_this) {
        return function() {
          _this._todos_changed();
          return _this.todos.collection().length - _this.completed_count();
        };
      })(this));
      this.all_completed = ko.computed({
        read: (function(_this) {
          return function() {
            return !_this.remaining_count();
          };
        })(this),
        write: (function(_this) {
          return function(completed) {
            return _this.todos.collection().each(function(model) {
              return model.save({
                completed: completed
              });
            });
          };
        })(this)
      });
      this.loc = {
        remaining_message: ko.computed((function(_this) {
          return function() {
            return "<strong>" + (_this.remaining_count()) + "</strong> " + (_this.remaining_count() === 1 ? 'item' : 'items') + " left";
          };
        })(this)),
        clear_message: ko.computed((function(_this) {
          return function() {
            if (_this.completed_count()) {
              return 'Clear completed';
            } else {
              return '';
            }
          };
        })(this))
      };
      router = new Backbone.Router;
      ref = ['', 'active', 'completed'];
      fn = (function(_this) {
        return function(route) {
          return router.route(route, null, function() {
            return _this.list_filter_mode(route);
          });
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        route = ref[i];
        fn(route);
      }
      Backbone.history.start();
    }

    AppViewModel.prototype.onAddTodo = function(vm, event) {
      if (!$.trim(this.title()) || (event.keyCode !== ENTER_KEY)) {
        return;
      }
      this.todos.collection().create({
        title: $.trim(this.title())
      });
      return this.title('');
    };

    AppViewModel.prototype.onClearCompleted = function() {
      var i, len, model, ref, results;
      ref = this.todos.collection().filter(function(model) {
        return model.get('completed');
      });
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        model = ref[i];
        results.push(model.destroy());
      }
      return results;
    };

    return AppViewModel;

  })();

}).call(this);
